buildscript {
    ext.kotlinVersion = '1.2.61'
    ext.springBootVersion = '2.0.5.RELEASE'
    ext.grpcVersion = '1.15.0'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
}

test {
    useJUnitPlatform()
}

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    // Infrastructure
    compile 'au.com.console:kassava:1.0.0'
    compile 'com.github.jsr-330:core:1.4.0'

    // Spring Boot
    compile 'org.jetbrains.kotlin:kotlin-reflect'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'

    // RxKotlin
    compile 'io.reactivex.rxjava2:rxkotlin:2.2.0'

    // Storage: SQLite, RxJava-JDBC, serialization
    compile 'org.xerial:sqlite-jdbc:3.21.0.1'
    compile 'com.github.davidmoten:rxjava2-jdbc:0.1-RC38'
    compile 'com.esotericsoftware:kryo:5.0.0-RC1' // Selected based on https://github.com/eishay/jvm-serializers/wiki

    // gRPC
    compile 'org.lognet:grpc-spring-boot-starter:2.4.1'
    compile "io.grpc:grpc-stub:$grpcVersion"

    // Testing
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    testCompile("org.assertj:assertj-core:3.11.1")
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.5.1-1' }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

group 'info.maaskant.wmsnotes'
version '1.0.0-SNAPSHOT'

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'app.Application'
        )
    }
    from configurations.compile.collect { entry -> zipTree(entry) }
}
